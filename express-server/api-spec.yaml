openapi: 3.0.0
x-stoplight:
  id: hp9sgyu2laazz
info:
  title: event-calendar
  version: '1.0'
  description: Backend API for the EventCalendar App.
servers:
  - url: 'http://localhost:3000'
paths:
  '/event/{eventId}':
    parameters:
      - schema:
          type: string
        name: eventId
        in: path
        required: true
    get:
      summary: Gets an Event
      tags:
        - Event
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Event not found
      operationId: get-event-eventId
      description: Gets an Event with a given ID
      parameters: []
    patch:
      summary: Updates an event
      operationId: patch-event-eventId
      responses:
        '204':
          description: Event updated
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Event not found
      description: Updates an event with the given ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      tags:
        - Event
    delete:
      summary: Deletes an event
      operationId: delete-event-eventId
      responses:
        '204':
          description: Event deleted
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Event not found
      description: Deletes an event with the given ID
      tags:
        - Event
  /event:
    post:
      summary: Creates a new event
      operationId: delete-event
      responses:
        '201':
          description: Event created
          content:
            application/json:
              schema:
                type: object
                properties:
                  eventId:
                    type: string
        '401':
          $ref: '#/components/responses/401'
      description: |-
        Creates a new event.

        Returns the ID of the newly created event
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      tags:
        - Event
  '/event/{eventId}/assign/{userId}':
    parameters:
      - schema:
          type: string
        name: eventId
        in: path
        required: true
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      summary: Assign an event to a user
      tags:
        - User
        - Event
      responses:
        '201':
          description: Assignment created
          content:
            application/json:
              schema:
                type: object
                properties:
                  attendanceId:
                    type: string
            application/xml:
              schema:
                type: object
                properties:
                  attendanceId:
                    type: string
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Event or user not found
      operationId: get-event-eventId-assign-userId
      description: Assigns a event with a given ID to a user with a given ID. Returns the ID of the attendance of a user to an an event.
  '/user/{userId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    get:
      summary: Gets a user
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: User not found
      operationId: get-user-userId
      description: Gets a user with the given ID
      tags:
        - User
    delete:
      summary: Deletes a user
      operationId: delete-user-userId
      responses:
        '204':
          description: User deleted
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: User not found
      description: Deletes a user with a given ID
      tags:
        - User
  '/user/{userId}/events':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    get:
      summary: Gets the events for a user
      tags:
        - User
        - Event
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: User not found
      operationId: get-user-userId-events
      description: Gets all the events that are assigned to a user with the given ID
  /user:
    post:
      summary: Creates a new user
      operationId: post-user
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
        '401':
          $ref: '#/components/responses/401'
      description: 'Creates a new user, returns an ID of the newly created user'
      tags:
        - User
    get:
      summary: Get all users
      operationId: get-user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/401'
      description: |-
        Gets all users

        By default only returns users that aren't admins, can be specified in query params if needed
      tags:
        - User
      parameters:
        - schema:
            type: boolean
          in: query
          name: includeAdmins
          description: Whether system administrators should be included in results or not. Default is false
  '/user/{userId}/photo':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    get:
      summary: Retrieves the photo of a given user
      tags:
        - User
      responses:
        '200':
          description: User found
          content:
            image/jpeg:
              schema:
                type: object
                properties: {}
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: User not found
      operationId: get-user-userOId
      description: Finds the photo of a user with the given ID
  /login:
    get:
      summary: Handle Login of user
      tags: []
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  isAdmin:
                    type: boolean
        '401':
          $ref: '#/components/responses/401'
      operationId: get-login
      description: |-
        Basically returns a body whether a user is an admin or not. If credentials are correct in auth header, then all it does is return body as specified below. 

        However, to handle case where creds are incorrrect (e.g. user has entered wrong username, password combination), then a 401 will be returned. Hence on front end, will need to handle case where request is 401, or if request is 200 - then check if a user is an admin or not.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
  /register:
    post:
      summary: Register a new user
      tags:
        - User
      responses:
        '200':
          description: OK
      operationId: get-user-register
      description: |-
        Registers a new user

        Intended to be used when a user on front end presses 'create account' button
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                password:
                  type: string
        description: 'Just the same as a normal user, without the isAdmin attribute'
    parameters: []
  '/user/{userId}/password':
    patch:
      summary: Changes a user password
      operationId: patch-user-password
      responses:
        '200':
          description: OK
      description: |-
        Changes the password of a user. 

        Changes the password of a user found in the auth header, once it passes auth - user is allowed to change their own password

        Admins have access to change any password. Otherwise, if it's a user, the id specified in the path param must match the one found in authorization.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  description: String value for the new password
        description: ''
      tags:
        - User
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
        description: Id of the user who's password is to be changed
components:
  schemas:
    User:
      title: User
      x-stoplight:
        id: gi5rugf7bx6yb
      type: object
      description: Represents a user within the domain
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        isAdmin:
          type: string
        email:
          type: string
        password:
          type: string
    Event:
      title: Event
      x-stoplight:
        id: jvb3r08ohl0mv
      type: object
      properties:
        eventId:
          type: string
        title:
          type: string
        location:
          type: string
        startDate:
          type: string
        endDate:
          type: string
        description:
          type: string
      description: Represents an Event within the domain
  securitySchemes:
    Authorization:
      type: apiKey
      in: header
      description: 'Authorization header. "Basic base64(username:password)"'
      name: Auth
  responses:
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            type: string
            default: Unauthorized
            example: Unauthorized
security:
  - Authorization: []
